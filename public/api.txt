router.get('/all', async function (req, res, next) {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const filter = {};
    if (req.query.type) {
        filter.type = req.query.type;
    }

    try {
        const allPokemon = await Pokemon.find(filter).skip(skip).limit(limit);
        const totalCount = await Pokemon.countDocuments(filter);
        console.log("Total Pok√©mon Count:", totalCount);
        res.set('x-total-count', totalCount);

        res.status(200).json(allPokemon);
    } catch (error) {
        console.error("Error fetching Pokemon:", error.message);
        res.status(500).json({ message: error.message });
    }
});

router.get('/top-attack', async function (req, res, next) {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 7;
    const skip = (page - 1) * limit;

    try {
        const topAttackPokemon = await Pokemon.find().sort({ 'base_stats.attack': -1 }).skip(skip).limit(limit);
        res.status(200).json(topAttackPokemon);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

router.get('/filter/types', async function (req, res, next) {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    try {
        const types = req.query.types.split(',');
        const pokemons = await Pokemon.find({ type: { $all: types } }).skip(skip).limit(limit);
        if (pokemons.length === 0) {
            return res.status(404).json({ message: 'No Pokemon found with these types' });
        }
        res.status(200).json(pokemons);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

router.get('/filter/weakness/:type', async function (req, res) {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    try {
        const type = await Type.findOne({ name: req.params.type });
        if (!type) {
            return res.status(404).json({ message: 'Type not found' });
        }
        const weaknessTypes = type.weaknesses;
        const pokemonList = await Pokemon.find({ type: { $in: weaknessTypes } }).skip(skip).limit(limit);
        if (pokemonList.length === 0) {
            return res.status(404).json({ message: 'No Pokemon found with this weakness type' });
        }
        res.status(200).json(pokemonList);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

router.get('/filter/height', async function (req, res, next) {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    try {
        const heightCategory = req.query.category;
        let heightFilter;

        switch (heightCategory) {
            case 'small':
                heightFilter = { height: { $lte: 1 } };
                break;
            case 'medium':
                heightFilter = { height: { $gt: 1, $lte: 3 } };
                break;
            case 'large':
                heightFilter = { height: { $gt: 3 } };
                break;
            default:
                return res.status(400).json({ message: 'Invalid height category' });
        }

        const pokemons = await Pokemon.find(heightFilter).skip(skip).limit(limit);
        res.status(200).json(pokemons);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

router.get('/filter/weight', async function (req, res, next) {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    try {
        const weightCategory = req.query.category;
        let weightFilter;

        switch (weightCategory) {
            case 'small':
                weightFilter = { weight: { $lte: 100 } };
                break;
            case 'medium':
                weightFilter = { weight: { $gt: 100, $lte: 300 } };
                break;
            case 'large':
                weightFilter = { weight: { $gt: 300 } };
                break;
            default:
                return res.status(400).json({ message: 'Invalid weight category' });
        }

        const pokemons = await Pokemon.find(weightFilter).skip(skip).limit(limit);
        res.status(200).json(pokemons);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});
